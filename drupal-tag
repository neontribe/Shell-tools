#!/bin/bash

USAGE="$0 [-y] [-o CURTAG] [-n NEWTAG] [-h] [/path/to/repo]"

function usage {
    echo $USAGE
    cat <<EOF

Tag a new release on a repo.

-o Current tag
  Override the previous tag to build the change log from
-n New tag
  Overrdie the new tag value, will skip the bump section
-b <major|minor|bump>]
  Sites are release in a x.y.z format where versions are major.minor.patch
  The script will bump that version by one in the category specified. If
  ommitted the script will ask.
EOF
}

while getopts "yo:n:b:h" options; do
    case $options in
        o) OLDBRANCH="$OPTARG";;
        n) NEWBRANCH="$OPTARG";;
        b) BUMP="$OPTARG";;
        y) YES=1;;
        h) usage; exit;;
    esac
done 

source `dirname $0`/drupal-functions

shift $((OPTIND-1))
if [ ! -z "$@" ]; then
    ROOTPATH=$@
else
    ROOTPATH=`pwd`
fi

# find .git folder
for x in `find $ROOTPATH -type d -name .git`; do
    GIT=`dirname $x`
    count=$(($count + 1))
done

if [ -z "$count" ]; then
    echo $USAGE
    echo "Unable to find .git folder, aborting"
    exit 1
elif [ "$count" -gt "1" ]; then
    echo $USAGE
    echo "Found multiple git repos, cannot continue."
    exit 1
fi

echo "Git found at $x, git folder set to $GIT"
GITCMD="git -C $GIT"

NEWCHANGELOG=$ROOTPATH/newchangelog.txt
OLDCHANGELOG=$ROOTPATH/changelog.txt

# find latest tag
if [ -z "$OLDBRANCH" ]; then
    CUR_TAG=`$GITCMD describe --abbrev=0 --tags`
else
    CUR_TAG=$OLDBRANCH
fi

if [ -z "$NEWBRANCH" ]; then
    getVersionElements $CUR_TAG
    bumpUp ${MAJOR_VERSION} ${MINOR_VERSION} ${PATCH_VERSION} ${BUMP}
    NEW_TAG="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
else
    NEW_TAG="$NEWBRANCH"
fi

echo $NEW_TAG > $NEWCHANGELOG
echo "======" >> $NEWCHANGELOG
$GITCMD log --no-merges --format="%ai %aN %b %n%n%x09* %s%d%n" $CUR_TAG..master >> $NEWCHANGELOG

# Preview the changes
if [ -z "$YES" ]; then
    less $NEWCHANGELOG
    echo Current Tag: $CUR_TAG
    echo New Tag: $NEW_TAG

    echo "Proceed (Y/n)"
    a=0
    until [ "$a" == "y" ] || [ "$a" == "n" ]; do
        read b
        a=`echo $b | tr '[:upper:]' '[:lower:]'`
    done
    if [ "$a" == "n" ]; then
        exit
    fi
fi

cat changelog.txt >> $NEWCHANGELOG
mv $NEWCHANGELOG changelog.txt
$GITCMD commit -a -m 'Updated change log'
$GITCMD tag $NEW_TAG
$GITCMD push origin master --tags
