#!/bin/bash

# Release files to rc.foo.com and testing.foo.com
# Fetch sql from rc.foo.com/latest
# and load that sql into both new sites

set -e

CWD=`dirname $0`
source $CWD/colours
source $CWD/ntdr.functions.sh

NO_ARGS=0
VERBOSE=off
USAGE="$0 [-y] [-v] [-h] [-s] [-r remote-drupal-root] [-l local-drupal-root] [[-b <major|minor|bump>] | [-f release]] [-m mysql-root-pass] remoteuser@remotehost"

if [ $# -eq "$NO_ARGS" ]; then
    echo $USAGE
    exit 1
fi

# Set defaults
DRUPAL_LOCAL_ROOT=`pwd`
DRUPAL_REMOTE_ROOT=/var/www

while getopts "yr:l:b:f:m:Vvsh" options; do
    case $options in
        y) YES="-y";;
        v) VERBOSE='verbose';;
        V) VERBOSE='very_verbose';;
        h) ntdr_usage; exit 0;;
        s) SKIP_SYMLINKS=1;;
        r) DRUPAL_REMOTE_ROOT="$OPTARG";;
        l) DRUPAL_LOCAL_ROOT="$OPTARG";;
        b) BUMP="$OPTARG";;
        f) RELEASE="$OPTARG";;
        m) MYSQL_ROOT_PASSWORD="$OPTARG";;
    esac
done

# Export this so sub-functions can see it
export VERBOSE

shift $((OPTIND-1))
RUSER=`echo $1 | awk -F @ '{print $1}'`
RHOST=`echo $1 | awk -F @ '{print $2}'`

RC_HOST=rc.${RHOST}

LATEST_DIR=$DRUPAL_REMOTE_ROOT/latest
TESTING_DIR=$DRUPAL_REMOTE_ROOT/testing

echo -e "${COL_GREEN}Initial Settings${COL_RESET}"
ntdr_debug "${COL_CYAN}DRUPAL_REMOTE_ROOT${COL_RESET} ${DRUPAL_REMOTE_ROOT}"
ntdr_debug "${COL_CYAN}DRUPAL_LOCAL_ROOT${COL_RESET} ${DRUPAL_LOCAL_ROOT}"
ntdr_debug "${COL_CYAN}BUMP${COL_RESET} ${BUMP}"
ntdr_debug "${COL_CYAN}RELEASE${COL_RESET} ${RELEASE}"
ntdr_debug "${COL_CYAN}MYSQL_ROOT_PASSWORD${COL_RESET} ${MYSQL_ROOT_PASSWORD}"
ntdr_debug "${COL_CYAN}RUSER${COL_RESET} ${RUSER}"
ntdr_debug "${COL_CYAN}RHOST${COL_RESET} ${RHOST}"
ntdr_debug "${COL_CYAN}RC_HOST${COL_RESET} ${RC_HOST}"
ntdr_debug "${COL_CYAN}LATEST_DIR${COL_RESET} ${LATEST_DIR}"
ntdr_debug "${COL_CYAN}TESTING_DIR${COL_RESET} ${TESTING_DIR}"

# Check remote folders exist
echo -e "${COL_GREEN}Checking remote servers dirs${COL_RESET}"
ntdr_checkRemoteDirExists $RUSER $RC_HOST $LATEST_DIR

CURRENT_LIVE_REAL_DIR=`ntdr_remotePath $RUSER $RC_HOST $LATEST_DIR`
CURRENT_LIVE_VERSION=`basename $CURRENT_LIVE_REAL_DIR`
CURRENT_TEST_VERSION=`basename $CURRENT_TEST_REAL_DIR`
ntdr_debug "${COL_CYAN}CURRENT_LIVE_REAL_DIR${COL_RESET} ${CURRENT_LIVE_REAL_DIR}"
ntdr_debug "${COL_CYAN}CURRENT_TEST_REAL_DIR${COL_RESET} ${CURRENT_TEST_REAL_DIR}"
ntdr_debug "${COL_CYAN}CURRENT_LIVE_VERSION${COL_RESET} ${CURRENT_LIVE_VERSION}"
ntdr_debug "${COL_CYAN}CURRENT_TEST_VERSION${COL_RESET} ${CURRENT_TEST_VERSION}"

LIVE_DUMP_FILE=$CURRENT_LIVE_VERSION-live-`date +"%y-%m-%d_%H-%M"`.sql
TEST_DUMP_FILE=$CURRENT_TEST_VERSION-testing-`date +"%y-%m-%d_%H-%M"`.sql

if [ -z "$RELEASE" ]; then
    echo -e "${COL_GREEN}Computing version numbers from${COL_RESET} testing version  ${CURRENT_TEST_VERSION} (Live: ${CURRENT_LIVE_VERSION})"
    # Get version numbers BRAND MAJOR_VERSION MINOR_VERSION PATCH_VERSION
    if [ "$CURRENT_TEST_VERSION" == 'testingdir' ]; then
        ntdr_versionElements $CURRENT_LIVE_VERSION
    else
        ntdr_versionElements $CURRENT_TEST_VERSION
    fi
    # this will create MAJOR_VERSION MINOR_VERSION PATCH_VERSION based on current test site version
    ntdr_bumpUp $MAJOR_VERSION $MINOR_VERSION $PATCH_VERSION $BUMP
    NEW_VERSION=${BRAND}_${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}
else 
    NEW_VERSION=$RELEASE
fi
ntdr_debug "${COL_CYAN}NEW_VERSION${COL_RESET} ${NEW_VERSION}"

NEW_REMOTE_PATH=$DRUPAL_REMOTE_ROOT/${NEW_VERSION}
VHOST_REMOTE_PATH=$DRUPAL_REMOTE_ROOT/`echo ${NEW_VERSION} | sed -e "s|\.|_|g"`

echo -e "${COL_GREEN}Preparing to remote copy${COL_RESET}"
echo -e "\t${RUSER}@${RC_HOST}:${CURRENT_LIVE_REAL_DIR} ${RUSER}@${RC_HOST}:${NEW_REMOTE_PATH}"
echo -e "${COL_GREEN}Then rsync${COL_RESET}"
echo -e "\t${DRUPAL_LOCAL_ROOT}/* to ${RUSER}@${RC_HOST}:${NEW_REMOTE_PATH}"
echo -e "${COL_GREEN}Then create a database/user/password:${COL_RESET} ${NEW_VERSION}"
echo -e "${COL_GREEN}The restore the DB from${COL_RESET} ${LIVE_DUMP_FILE}"
echo -e "${COL_MAGENTA}Proceed (y/N)?${COL_RESET}"

if [ -z "$YES" ]; then
    read a
    if [ "$a" != 'y' ] && [ "$a" != 'Y' ]; then
        echo Aborting
        exit 0
    fi
fi

mkdir -p ~/.nt_tabs
# Get the database from latest
echo -e "${COL_GREEN}Fetching live DB${COL_RESET}"
ntdr_debug "${COL_CYAN}Dump file $LIVE_DUMP_FILE${COL_RESET}"
ntdr_dumpRemoteDB $RUSER $RC_HOST $LATEST_DIR /var/tmp/$LIVE_DUMP_FILE
scp $RUSER@$RC_HOST:/var/tmp/$LIVE_DUMP_FILE ~/.nt_tabs/$LIVE_DUMP_FILE

echo -e "${COL_GREEN}Create new alias files${COL_RESET}"
ntdr_createAlias $DRUPAL_LOCAL_ROOT $NEW_VERSION $RC_HOST

echo -e "${COL_GREEN}Create changelog${COL_RESET}"
ntdr_createChangeLog $DRUPAL_LOCAL_ROOT $NEW_VERSION

echo -e "${COL_GREEN}Prepare settings file${COL_RESET}"
ntdr_createSettingFile $DRUPAL_LOCAL_ROOT $NEW_VERSION

for SITE in $RC_HOST; do
    echo -e "${COL_GREEN}Pre-fix permission on ${SITE}${COL_RESET}"
    ssh -t $RUSER@$SITE sudo /usr/local/share/Shell-tools/ntdrchown ${CURRENT_LIVE_REAL_DIR}
    ssh -t $RUSER@$SITE sudo /usr/local/share/Shell-tools/ntdrchown ${CURRENT_TEST_REAL_DIR}
done

echo -e "${COL_GREEN}Pre-fix local permissions"
sudo ntdrchown -a ${DRUPAL_LOCAL_ROOT}

echo -e "${COL_GREEN}Pre-sync${COL_RESET}"
ssh $RUSER@$RC_HOST rsync -a --size-only --no-p -O --no-g --exclude=tabs-imagecache --exclude=.sass-cache ${CURRENT_LIVE_REAL_DIR}/ ${NEW_REMOTE_PATH}

echo -e "${COL_GREEN}Sync up${COL_RESET}"
if [ "$VERBOSE" != "off" ]; then
    if [ "$VERBOSE" == "very_verbose" ]; then
        PROGRESS="--progress"
    elif [ "$VERBOSE" == "verbose" ]; then
        PROGRESS="-v"
    fi
fi

ntdr_debug "Rsync down files"
rsync -a $PROGRESS --size-only --no-p -O --no-g --exclude=tabs-imagecache --exclude=.sass-cache $RUSER@$RC_HOST:${CURRENT_LIVE_REAL_DIR}/sites/default/files ${DRUPAL_LOCAL_ROOT}/sites/default

ntdr_debug "Syncing to $RUSER@$RC_HOST:${NEW_REMOTE_PATH}"
rsync -a $PROGRESS --size-only --no-p -O --no-g --exclude=tabs-imagecache --exclude=.sass-cache ${DRUPAL_LOCAL_ROOT}/* $RUSER@$RC_HOST:${NEW_REMOTE_PATH}

echo -e "${COL_GREEN}Rsync up files${COL_RESET}"
rsync -a $PROGRESS --size-only --no-p -O --no-g --exclude=tabs-imagecache --exclude=.sass-cache ${DRUPAL_LOCAL_ROOT}/sites/default/files $RUSER@$RC_HOST:${CURRENT_LIVE_REAL_DIR}/sites/default

for HOST in $RC_HOST; do
    echo -e "${COL_GREEN}Change settings files on $HOST${COL_RESET}"
    ssh $RUSER@$HOST chmod 664 ${NEW_REMOTE_PATH}/sites/default/settings.php
    ssh $RUSER@$HOST chmod 775 ${NEW_REMOTE_PATH}/sites/default

    ssh $RUSER@$HOST cp ${NEW_REMOTE_PATH}/sites/default/${NEW_VERSION}_settings.php ${NEW_REMOTE_PATH}/sites/default/settings.php

    ssh $RUSER@$HOST chmod 664 ${NEW_REMOTE_PATH}/sites/default/settings.php
    ssh $RUSER@$HOST chmod 775 ${NEW_REMOTE_PATH}/sites/default

    echo -e "${COL_GREEN}Create new DB if needed on $HOST${COL_RESET}"
    ntdr_createRemoteDB $RUSER $HOST $CURRENT_LIVE_REAL_DIR $MYSQL_ROOT_PASSWORD $NEW_VERSION

    echo -e "${COL_GREEN}Fix perms on $HOST${COL_RESET}"
    ssh $RUSER@$HOST "find ${NEW_REMOTE_PATH}/sites/default -type d -exec chmod 2775 {} \;"
done
# echo -e $COL_GREEN"chmod run, I shouldn't have rights to change ownership you may need to run:"$COL_RESET
# echo -e $COL_YELLOW"  sudo chown -R www-data:www-data ${NEW_REMOTE_PATH}/sites/*/files"$COL_RESET

echo -e "${COL_GREEN}Upload db to both${COL_RESET}"
drush @${NEW_VERSION}.rc sqlc < ~/.nt_tabs/${LIVE_DUMP_FILE}

echo -e "${COL_GREEN}Drush up${COL_RESET}"
drush @${NEW_VERSION}.rc $YES up

echo -e "${COL_GREEN}Drush updb${COL_RESET}"
drush @${NEW_VERSION}.rc $YES updb

echo -e "${COL_GREEN}Preserve robots.txt${COL_RESET}"
set +e
ssh $RUSER@$RC_HOST cp ${NEW_REMOTE_PATH}/robots.txt ${NEW_REMOTE_PATH}/robots.${NEW_VERSION}.txt
ssh $RUSER@$RC_HOST cp /var/www/testing/robots.txt ${NEW_REMOTE_PATH}/robots.txt
set -e

echo -e "${COL_GREEN}Drush cc all${COL_RESET}"
drush @${NEW_VERSION}.rc cc all

for SITE in $RC_HOST; do
    if [ -z "$SKIP_SYMLINKS" ]; then
        echo -e "${COL_GREEN}Updating symlinks on ${SITE}${COL_RESET}"
        ssh $RUSER@$SITE "rm ${DRUPAL_REMOTE_ROOT}/testing"
        ssh $RUSER@$SITE "ln -s ${NEW_REMOTE_PATH} ${DRUPAL_REMOTE_ROOT}/testing"
        ssh $RUSER@$SITE "ln -s ${NEW_REMOTE_PATH} ${VHOST_REMOTE_PATH}"
    else
        echo -e "${COL_YELLOW}Skipping symlinksb${COL_RESET}"
    fi

    echo -e "${COL_GREEN}Fix permissions on ${SITE}${COL_RESET}"
    ssh -t $RUSER@$SITE "sudo /usr/local/share/Shell-tools/ntdrchown ${NEW_REMOTE_PATH}"

    echo -e "${COL_GREEN}Compass compile${COL_RESET}"
    ssh $RUSER@$SITE "ntdr-compass /var/www/latest/sites/all/themes/"
done

