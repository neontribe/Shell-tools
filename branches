#!/bin/bash

NO_ARGS=0
USAGE="`basename $0` [-f] [-l [-a]] [-p] [-b branch] path/to/drupal"
EXITSTATE=0

function usage {
    echo $USAGE
    cat <<EOF
Search the file system down from the specified path looking for git repos.

For each repo found print the name, current branch, (optionally the latest tag)
and the path to the repo.

Optional a new named branch can be created and checkout out/pulled.

-f  Fetch origin
-p  Plain out put, supress colours. Use to create a changelog entry.
-l  Show latest tag. If colours are enabled then tag that have different
    content to the current branch are coloured red.
-b branch
    If specified and the remote branch exists then a the branch is checked out
    and pulled. Existing changes will be stashed, and then applied.
-a  Auto tag. If used in conjuction with -l then drupal-tag will be called with
    a patch level bump.
EOF
}

while getopts "b:lpfh" options; do
    case $options in
        b) newbranch="$OPTARG";;
        l) latesttag=1;;
        p) plainoutput=1;;
        f) fetchorigin=1;;
        h) usage; exit;;
    esac
done

shift $((OPTIND-1))

if [ -z "$plainoutput" ]; then
    ESC_SEQ="\x1b["
    COL_RESET=$ESC_SEQ"39;49;00m"
    COL_RED=$ESC_SEQ"31;01m"
    COL_GREEN=$ESC_SEQ"32;01m"
    COL_YELLOW=$ESC_SEQ"33;01m"
    COL_BLUE=$ESC_SEQ"34;01m"
    COL_MAGENTA=$ESC_SEQ"35;01m"
    COL_CYAN=$ESC_SEQ"36;01m"
fi

if [ ! -z "$latesttag" ]; then
    printf "${COL_GREEN}%-20s %-25s %-10s %s${COL_RESET}\n" Name Branch Tag Path
else
    printf "${COL_GREEN}%-20s %-25s %s${COL_RESET}\n" Name Branch Path
fi

EXITSTATE=0
if [ ! -z "$@" ]; then
    ROOTPATH=$@
else
    ROOTPATH=`pwd`
fi

for var in "$ROOTPATH"; do
    if [ -d $var ]; then
        for x in `find $var/* -name .git | grep -v vendor`; do
            dir=`dirname $x`
            name=`basename $dir`
            clean_dir=${dir#$ROOTPATH/}
            if [ "$name" == "tabs-api-client" ] || [ "$name" == "contrib" ]; then
              continue
            fi
            GITCMD="git -C `dirname $x`"
            # Fetch latest
            if [ ! -z "$fetchorigin" ]; then
                $GITCMD fetch origin > /dev/null
            fi
            branch=`$GITCMD branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/' | tr -d "()"`
            if [ ! -z "$latesttag" ]; then
                lt=`$GITCMD describe --abbrev=0 --tags 2> /dev/null`
                diff=`$GITCMD diff refs/heads/${branch}..refs/tags/${lt} 2> /dev/null`
                if [ ! -z "$diff" ]; then
                    printf "$COL_MAGENTA%-20s$COL_RESET %-25s $COL_RED%-10s$COL_RESET %s\n" $name "$branch" $lt $clean_dir
                else
                    printf "$COL_CYAN%-20s$COL_RESET %-25s %-10s %s\n" $name "$branch" $lt $clean_dir
                fi
            else
                printf "%-25s %-20s %s\n" $name $branch $clean_dir
            fi
            if [ ! -z "$newbranch" ]; then
                # The --git-dir doesn't work in this case
                $GITCMD stash
                $GITCMD fetch origin --tags
                $GITCMD show-branch $newbranch > /dev/null
                if [ "$?" == 0 ]; then
                    $GITCMD checkout $newbranch
                    $GITCMD pull origin $newbranch
                fi
            fi
        done
    fi
done

exit $EXITSTATE
